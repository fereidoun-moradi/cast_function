target Cpp {
    fast: false,
    threads: 1
    //timeout: 4 sec
};

main reactor extract {
    
    
    private preamble {=  
        #include <fstream>
        #include <vector>
        #include <string>
        #include <iostream>
        #include <stdio.h>
        #include <string> 

    =}
    reaction (startup) {=
        std::ifstream readFile;
		std::fstream writeFile;

		
		std::cout << "Please enter your file name (*.aut) with directory path (e.g., /Users/fmi04/src-gen/bin/RV-Example.aut): " << '\n';
		std::string filename;
		std::cin >> filename;
		readFile.open(filename);
		if (!readFile.is_open()) {
       	 	exit(EXIT_FAILURE);
    	}
		
		
		
		std::string observable_actions;
		std::vector<std::string> temp;
        std::cout << "Please write a list of observable actions: (separated with comma)? " << '\n';
		std::cin >> observable_actions;
        
        //writeFile.open("/Users/fmi04/runtime-EclipseXtext/roomT_GitHub/src-gen/bin/ignoreList.txt", std::ofstream::out | std::ofstream::trunc);
        //writeFile.open("/Users/fmi04/runtime-EclipseXtext/roomT_GitHub/src-gen/bin/temp", std::ios_base::out|std::ios_base::in|std::ios_base::app);
        //writeFile << "A ignore list of labels of transitions (separated with comma) in which observable actions are ignored: "<< observable_actions << "\n";
        //observable_actions.append(",time");
        //observable_actions.append(",(");
        
        while(!readFile.eof()){

			std::string line;
			getline(readFile, line);
			size_t startPoint, endPoint;

			startPoint = line.find(",\"");
			endPoint = line.find("\",");

			
			std::string result = line.substr(startPoint+2,endPoint-startPoint-2);
			//std::cout << result << "\n";
			
			 
        	
        	std::stringstream ss(observable_actions);
			std::string substr;
			int found = 0;
			while(std::getline(ss, substr, ',')){
                if(result.find(substr) != std::string::npos){
                    found = 1;
                }
            }
			
			
			int douplicated = 0;
			if (found == 0){
               //std::cout << result << "\n";
               for(int i = 0; i < temp.size(); i++){
	               if(temp[i].find(result) != std::string::npos){
	                	douplicated = 1;
		            } 
	           
	           }
	           if(douplicated == 0){
		          temp.push_back(result);
		          std::cout << result << "," << "\n";
            	}
           } 
			
        }
        
    =}
}